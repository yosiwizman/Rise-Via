generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  role      String    @default("ADMIN")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("admins")
}

model Product {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  description     String?
  category        String
  strainType      String
  thcaPercentage  Float
  cbdPercentage   Float?
  price           Float
  featured        Boolean  @default(false)
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  images          ProductImage[]
  variants        ProductVariant[]
  effects         ProductEffect[]
  terpenes        ProductTerpene[]
  coiDocuments    COIDocument[]
  inventory       InventoryItem[]
  orderItems      OrderItem[]
  b2bPricing      B2BPricing[]
  
  @@map("products")
}

model ProductImage {
  id          String  @id @default(cuid())
  productId   String
  url         String
  publicId    String
  altText     String?
  isPrimary   Boolean @default(false)
  sortOrder   Int     @default(0)
  
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_images")
}

model ProductVariant {
  id          String  @id @default(cuid())
  productId   String
  name        String
  weight      String
  price       Float
  sku         String  @unique
  active      Boolean @default(true)
  
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventory   InventoryItem[]
  
  @@map("product_variants")
}

model ProductEffect {
  id          String  @id @default(cuid())
  productId   String
  effect      String
  intensity   Int     @default(1)
  
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_effects")
}

model ProductTerpene {
  id          String  @id @default(cuid())
  productId   String
  name        String
  percentage  Float
  
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_terpenes")
}

model COIDocument {
  id          String   @id @default(cuid())
  productId   String
  batchId     String
  url         String
  publicId    String
  testDate    DateTime
  expiryDate  DateTime?
  labName     String
  qrCode      String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("coi_documents")
}

model InventoryItem {
  id          String   @id @default(cuid())
  productId   String
  variantId   String?
  quantity    Int
  reserved    Int      @default(0)
  available   Int
  location    String?
  batchId     String?
  expiryDate  DateTime?
  updatedAt   DateTime @updatedAt
  
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant     ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
  
  @@map("inventory_items")
}

model PricingRule {
  id          String   @id @default(cuid())
  name        String
  type        String
  value       Float
  startDate   DateTime
  endDate     DateTime?
  active      Boolean  @default(true)
  conditions  String?
  createdAt   DateTime @default(now())
  
  @@map("pricing_rules")
}

model Customer {
  id              String   @id @default(cuid())
  email           String   @unique
  firstName       String
  lastName        String
  phone           String?
  dateOfBirth     DateTime?
  isVerified      Boolean  @default(false)
  password        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  profile         CustomerProfile?
  loyaltyTransactions LoyaltyTransaction[]
  communications  Communication[]
  orders          Order[]
  
  @@map("customers")
}

model CustomerProfile {
  id                String    @id @default(cuid())
  customerId        String    @unique
  customer          Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  // Medical Info
  medicalCardNumber String?
  medicalCardExpiry DateTime?
  
  // Preferences (stored as JSON strings in SQLite)
  favoriteStrains   String?   // JSON array of strain names
  preferredEffects  String?   // JSON array of effects
  
  // CRM Fields
  totalOrders       Int       @default(0)
  lifetimeValue     Float     @default(0)
  lastOrderDate     DateTime?
  averageOrderValue Float     @default(0)
  segment           String    @default("New") // VIP, Regular, New, Dormant
  notes             String?
  tags              String?   // JSON array of tags
  
  // Membership
  membershipTier    String    @default("GREEN") // GREEN, SILVER, GOLD, PLATINUM
  loyaltyPoints     Int       @default(0)
  pointsExpiry      DateTime?
  memberSince       DateTime  @default(now())
  referralCode      String    @unique
  referredBy        String?
  totalReferrals    Int       @default(0)
  
  // B2B Fields
  isB2B             Boolean   @default(false)
  businessName      String?
  businessLicense   String?
  taxExemptId       String?
  wholesaleTier     String?   // WHOLESALE, DISTRIBUTOR, PARTNER
  creditLimit       Float?
  paymentTerms      String?   // NET30, NET60, NET90
  salesRepId        String?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@map("customer_profiles")
}

model LoyaltyTransaction {
  id          String    @id @default(cuid())
  customerId  String
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  type        String    // EARNED, REDEEMED, EXPIRED, BONUS
  points      Int
  description String
  orderId     String?
  
  createdAt   DateTime  @default(now())
  
  @@map("loyalty_transactions")
}

model Order {
  id          String    @id @default(cuid())
  customerId  String
  customer    Customer  @relation(fields: [customerId], references: [id])
  
  orderNumber String    @unique
  status      String    @default("PENDING") // PENDING, CONFIRMED, SHIPPED, DELIVERED, CANCELLED
  total       Float
  subtotal    Float
  tax         Float
  shipping    Float
  discount    Float     @default(0)
  
  shippingAddress String
  billingAddress  String
  
  items       OrderItem[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  
  quantity    Int
  price       Float
  total       Float
  
  @@map("order_items")
}

model B2BPricing {
  id          String    @id @default(cuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  tier        String    // WHOLESALE, DISTRIBUTOR, PARTNER
  minQuantity Int
  price       Float
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("b2b_pricing")
}

model Communication {
  id          String    @id @default(cuid())
  customerId  String
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  type        String    // EMAIL, SMS, TICKET
  subject     String?
  message     String
  status      String    // SENT, DELIVERED, READ, REPLIED
  
  createdAt   DateTime  @default(now())
  
  @@map("communications")
}

// SQLite doesn't support enums, using strings with constraints instead
// AdminRole: SUPER_ADMIN, ADMIN, EDITOR
// StrainType: SATIVA, INDICA, HYBRID  
// PricingType: PERCENTAGE_DISCOUNT, FIXED_DISCOUNT, FIXED_PRICE, BULK_DISCOUNT
// CustomerSegment: VIP, Regular, New, Dormant
// MembershipTier: GREEN, SILVER, GOLD, PLATINUM
// WholesaleTier: WHOLESALE, DISTRIBUTOR, PARTNER
// OrderStatus: PENDING, CONFIRMED, SHIPPED, DELIVERED, CANCELLED
// CommunicationType: EMAIL, SMS, TICKET
// CommunicationStatus: SENT, DELIVERED, READ, REPLIED
// LoyaltyTransactionType: EARNED, REDEEMED, EXPIRED, BONUS
