generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  role      String    @default("ADMIN")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("admins")
}

model Product {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  description     String?
  category        String
  strainType      String
  thcaPercentage  Float
  cbdPercentage   Float?
  price           Float
  featured        Boolean  @default(false)
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  images          ProductImage[]
  variants        ProductVariant[]
  effects         ProductEffect[]
  terpenes        ProductTerpene[]
  coiDocuments    COIDocument[]
  inventory       InventoryItem[]
  
  @@map("products")
}

model ProductImage {
  id          String  @id @default(cuid())
  productId   String
  url         String
  publicId    String
  altText     String?
  isPrimary   Boolean @default(false)
  sortOrder   Int     @default(0)
  
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_images")
}

model ProductVariant {
  id          String  @id @default(cuid())
  productId   String
  name        String
  weight      String
  price       Float
  sku         String  @unique
  active      Boolean @default(true)
  
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventory   InventoryItem[]
  
  @@map("product_variants")
}

model ProductEffect {
  id          String  @id @default(cuid())
  productId   String
  effect      String
  intensity   Int     @default(1)
  
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_effects")
}

model ProductTerpene {
  id          String  @id @default(cuid())
  productId   String
  name        String
  percentage  Float
  
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_terpenes")
}

model COIDocument {
  id          String   @id @default(cuid())
  productId   String
  batchId     String
  url         String
  publicId    String
  testDate    DateTime
  expiryDate  DateTime?
  labName     String
  qrCode      String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("coi_documents")
}

model InventoryItem {
  id          String   @id @default(cuid())
  productId   String
  variantId   String?
  quantity    Int
  reserved    Int      @default(0)
  available   Int
  location    String?
  batchId     String?
  expiryDate  DateTime?
  updatedAt   DateTime @updatedAt
  
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant     ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
  
  @@map("inventory_items")
}

model PricingRule {
  id          String   @id @default(cuid())
  name        String
  type        String
  value       Float
  startDate   DateTime
  endDate     DateTime?
  active      Boolean  @default(true)
  conditions  String?
  createdAt   DateTime @default(now())
  
  @@map("pricing_rules")
}

// SQLite doesn't support enums, using strings with constraints instead
// AdminRole: SUPER_ADMIN, ADMIN, EDITOR
// StrainType: SATIVA, INDICA, HYBRID  
// PricingType: PERCENTAGE_DISCOUNT, FIXED_DISCOUNT, FIXED_PRICE, BULK_DISCOUNT
